Given an integer array nums, find a 
subarray
 that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any subarray of nums is guaranteed to fit in a 32-bit integer.

// output
class Solution {
    public int maxProduct(int[] nums) {
        int n=nums.length;
        int max=Integer.MIN_VALUE;
        int count=1;
        for(int i=0; i<n; i++){
            count*=nums[i];
            max=Math.max(max,count);
            if(count==0){
                count=1;
            }
        }
            count=1;
            for(int i=nums.length-1; i>=0; i--){
                count*=nums[i];
                max=Math.max(max,count);
                if(count==0) count=1;

            
        }
        return max;
    }
}
